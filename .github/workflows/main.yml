name: Docker Image CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/acne-scan-api:latest

      - name: Connect SSH and deploy container
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Stop and remove any existing containers
            sudo docker stop ${{ secrets.CONTAINER_NAME }} || true
            sudo docker rm ${{ secrets.CONTAINER_NAME }} || true
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/acne-scan-api || true

            # Pull the new image
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/acne-scan-api:latest

            # Run the new application container
            sudo docker run --name ${{ secrets.CONTAINER_NAME }} --network caddy_net -d \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/acne-scan-api

            # Create or start the Caddy container
            sudo docker run --name caddy --network caddy_net -d -p 80:80 -p 443:443 \
              -v ./Caddyfile:/etc/caddy/Caddyfile \
              -v caddy_data:/data \
              -v caddy_config:/config \
              caddy:latest

            # Run the database migrations
            sudo docker exec ${{ secrets.CONTAINER_NAME }} migrate -database "mysql://${{ secrets.DB_USERNAME }}:${{ secrets.DB_PASSWORD }}@tcp(${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }})/${{ secrets.DB_NAME }}" -path /app/internal/infrastructure/database/migrations up
